<?php

use PhpParser\Node\Name;

/**
 * Copyright (C) 2010-2020 Combodo SARL
 *
 *   This file is part of iTop.
 *
 *   iTop is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU Affero General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   iTop is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Affero General Public License for more details.
 *
 *   You should have received a copy of the GNU Affero General Public License
 *   along with iTop. If not, see <http: *www.gnu.org/licenses/>
 *
 */

class NodeVisitorClassExtractor extends \PhpParser\NodeVisitorAbstract
{
	/** @var string[] */
	private $aExpectedClassPerDirectory;
	private $sWriteToPath;
	private $aOptions;
	/** @var \Symfony\Component\Finder\SplFileInfo  */
	private $oFile;
	private $sScanDir;

	public function __construct($sWriteToPath, $aExpectedClassPerDirectory, $sScanDir, \Symfony\Component\Finder\SplFileInfo $oFile, $aOptions)
	{
		$this->sWriteToPath = $sWriteToPath;
		$this->aExpectedClassPerDirectory = $aExpectedClassPerDirectory;
		$this->oFile = $oFile;
		$this->aOptions = $aOptions;
		$this->sScanDir = $sScanDir;
	}

	public function enterNode(\PhpParser\Node $node) {
		if ($node instanceof PhpParser\Node\Stmt\Class_) {
			if (! in_array($node->name, $this->aExpectedClassPerDirectory))
			{
				echo " HUHO  it\'s quite a surprise the regex did not found $node->name!";
			}

			$sNamespace = $this->computeNamespaceClass($node);
			$sFullyQualifiedClassName = "$sNamespace\\{$node->name}";
			if (! $sNamespace)
			{
				return \PhpParser\NodeTraverser::DONT_TRAVERSE_CHILDREN;
			}

			$sNamespacedDirName = $this->sWriteToPath.'/' . str_replace('\\', '/', ltrim($sNamespace, '\\'));
			$sNamespacedFilePath = "{$sNamespacedDirName}/{$node->name}.php";
			@mkdir($sNamespacedDirName, 0775, true);

			$sPathToOriginalClass = "APPROOT . '{$this->sScanDir}/{$this->oFile->getRelativePath()}{$this->oFile->getBasename()}'";

			file_put_contents($sNamespacedFilePath, "<?php\n/**\n * This file was auto-generated by iTop\n*/\nrequire_once({$sPathToOriginalClass});\n\nclass_alias('{$sFullyQualifiedClassName}', '{$node->name}', false);\n");

			return \PhpParser\NodeTraverser::DONT_TRAVERSE_CHILDREN;
		}
	}

	/**
	 * @param $aOptions
	 */
	protected function computeNamespaceClass(\PhpParser\Node $node)
	{
		if (!isset($this->aOptions['namespaces']))
		{
			return false;
		}

		foreach ($this->aOptions['namespaces'] as $sPattern => $sNamespace)
		{
			if (preg_match("/$sPattern/", $this->oFile->getBasename()))
			{
				return "{$sNamespace}";
			}
		}

		if (isset($this->aOptions['namespaces']['default']))
		{
			return $this->aOptions['namespaces']['default'];
		}

		return false;
	}
}